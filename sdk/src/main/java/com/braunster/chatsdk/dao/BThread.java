package com.braunster.chatsdk.dao;

import java.util.List;
import com.braunster.chatsdk.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table BTHREAD.
 */
public class BThread extends Entity  {

    private String entityID;
    private java.util.Date creationDate;
    private Boolean dirty;
    private Boolean hasUnreadMessages;
    private String name;
    private String type;
    private String LastMaessageAddedentityID;
    private String creatorentityID;
    private String BMessageentityID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BThreadDao myDao;

    private BMessage LastMaessageAdded;
    private String LastMaessageAdded__resolvedKey;

    private BUser creator;
    private String creator__resolvedKey;

    private List<BMessage> messages;

    public BThread() {
    }

    public BThread(String entityID) {
        this.entityID = entityID;
    }

    public BThread(String entityID, java.util.Date creationDate, Boolean dirty, Boolean hasUnreadMessages, String name, String type, String LastMaessageAddedentityID, String creatorentityID, String BMessageentityID) {
        this.entityID = entityID;
        this.creationDate = creationDate;
        this.dirty = dirty;
        this.hasUnreadMessages = hasUnreadMessages;
        this.name = name;
        this.type = type;
        this.LastMaessageAddedentityID = LastMaessageAddedentityID;
        this.creatorentityID = creatorentityID;
        this.BMessageentityID = BMessageentityID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBThreadDao() : null;
    }

    public String getEntityID() {
        return entityID;
    }

    public void setEntityID(String entityID) {
        this.entityID = entityID;
    }

    public java.util.Date getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(java.util.Date creationDate) {
        this.creationDate = creationDate;
    }

    public Boolean getDirty() {
        return dirty;
    }

    public void setDirty(Boolean dirty) {
        this.dirty = dirty;
    }

    public Boolean getHasUnreadMessages() {
        return hasUnreadMessages;
    }

    public void setHasUnreadMessages(Boolean hasUnreadMessages) {
        this.hasUnreadMessages = hasUnreadMessages;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getLastMaessageAddedentityID() {
        return LastMaessageAddedentityID;
    }

    public void setLastMaessageAddedentityID(String LastMaessageAddedentityID) {
        this.LastMaessageAddedentityID = LastMaessageAddedentityID;
    }

    public String getCreatorentityID() {
        return creatorentityID;
    }

    public void setCreatorentityID(String creatorentityID) {
        this.creatorentityID = creatorentityID;
    }

    public String getBMessageentityID() {
        return BMessageentityID;
    }

    public void setBMessageentityID(String BMessageentityID) {
        this.BMessageentityID = BMessageentityID;
    }

    /** To-one relationship, resolved on first access. */
    public BMessage getLastMaessageAdded() {
        String __key = this.LastMaessageAddedentityID;
        if (LastMaessageAdded__resolvedKey == null || LastMaessageAdded__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BMessageDao targetDao = daoSession.getBMessageDao();
            BMessage LastMaessageAddedNew = targetDao.load(__key);
            synchronized (this) {
                LastMaessageAdded = LastMaessageAddedNew;
            	LastMaessageAdded__resolvedKey = __key;
            }
        }
        return LastMaessageAdded;
    }

    public void setLastMaessageAdded(BMessage LastMaessageAdded) {
        synchronized (this) {
            this.LastMaessageAdded = LastMaessageAdded;
            LastMaessageAddedentityID = LastMaessageAdded == null ? null : LastMaessageAdded.getEntityID();
            LastMaessageAdded__resolvedKey = LastMaessageAddedentityID;
        }
    }

    /** To-one relationship, resolved on first access. */
    public BUser getCreator() {
        String __key = this.creatorentityID;
        if (creator__resolvedKey == null || creator__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BUserDao targetDao = daoSession.getBUserDao();
            BUser creatorNew = targetDao.load(__key);
            synchronized (this) {
                creator = creatorNew;
            	creator__resolvedKey = __key;
            }
        }
        return creator;
    }

    public void setCreator(BUser creator) {
        synchronized (this) {
            this.creator = creator;
            creatorentityID = creator == null ? null : creator.getEntityID();
            creator__resolvedKey = creatorentityID;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<BMessage> getMessages() {
        if (messages == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BMessageDao targetDao = daoSession.getBMessageDao();
            List<BMessage> messagesNew = targetDao._queryBThread_Messages(entityID);
            synchronized (this) {
                if(messages == null) {
                    messages = messagesNew;
                }
            }
        }
        return messages;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMessages() {
        messages = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
