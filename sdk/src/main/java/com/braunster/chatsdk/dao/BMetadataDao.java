package com.braunster.chatsdk.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.braunster.chatsdk.dao.BMetadata;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BMETADATA.
*/
public class BMetadataDao extends AbstractDao<BMetadata, Void> {

    public static final String TABLENAME = "BMETADATA";

    /**
     * Properties of entity BMetadata.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Authentication_id = new Property(0, String.class, "authentication_id", false, "AUTHENTICATION_ID");
        public final static Property Dirty = new Property(1, Boolean.class, "dirty", false, "DIRTY");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Key = new Property(3, String.class, "Key", false, "KEY");
        public final static Property Value = new Property(4, String.class, "Value", false, "VALUE");
        public final static Property Owner = new Property(5, String.class, "Owner", false, "OWNER");
    };

    private DaoSession daoSession;


    public BMetadataDao(DaoConfig config) {
        super(config);
    }
    
    public BMetadataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BMETADATA' (" + //
                "'AUTHENTICATION_ID' TEXT NOT NULL ," + // 0: authentication_id
                "'DIRTY' INTEGER," + // 1: dirty
                "'TYPE' TEXT NOT NULL ," + // 2: type
                "'KEY' TEXT NOT NULL ," + // 3: Key
                "'VALUE' TEXT NOT NULL ," + // 4: Value
                "'OWNER' TEXT);"); // 5: Owner
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BMETADATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BMetadata entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getAuthentication_id());
 
        Boolean dirty = entity.getDirty();
        if (dirty != null) {
            stmt.bindLong(2, dirty ? 1l: 0l);
        }
        stmt.bindString(3, entity.getType());
        stmt.bindString(4, entity.getKey());
        stmt.bindString(5, entity.getValue());
 
        String Owner = entity.getOwner();
        if (Owner != null) {
            stmt.bindString(6, Owner);
        }
    }

    @Override
    protected void attachEntity(BMetadata entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public BMetadata readEntity(Cursor cursor, int offset) {
        BMetadata entity = new BMetadata( //
            cursor.getString(offset + 0), // authentication_id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // dirty
            cursor.getString(offset + 2), // type
            cursor.getString(offset + 3), // Key
            cursor.getString(offset + 4), // Value
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // Owner
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BMetadata entity, int offset) {
        entity.setAuthentication_id(cursor.getString(offset + 0));
        entity.setDirty(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setType(cursor.getString(offset + 2));
        entity.setKey(cursor.getString(offset + 3));
        entity.setValue(cursor.getString(offset + 4));
        entity.setOwner(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(BMetadata entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(BMetadata entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getBUserDao().getAllColumns());
            builder.append(" FROM BMETADATA T");
            builder.append(" LEFT JOIN BUSER T0 ON T.'OWNER'=T0.'ENTITY_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected BMetadata loadCurrentDeep(Cursor cursor, boolean lock) {
        BMetadata entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        BUser bUser = loadCurrentOther(daoSession.getBUserDao(), cursor, offset);
        entity.setBUser(bUser);

        return entity;    
    }

    public BMetadata loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<BMetadata> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<BMetadata> list = new ArrayList<BMetadata>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<BMetadata> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<BMetadata> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
