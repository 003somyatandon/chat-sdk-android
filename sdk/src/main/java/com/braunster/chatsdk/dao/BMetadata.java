package com.braunster.chatsdk.dao;

import com.braunster.chatsdk.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.braunster.chatsdk.dao.entities.BMetadataEntity;
import com.braunster.chatsdk.network.BDefines;
import com.braunster.chatsdk.network.firebase.BFirebaseDefines;
import com.braunster.chatsdk.network.firebase.BPath;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
// KEEP INCLUDES END
/**
 * Entity mapped to table BMETADATA.
 */
public class BMetadata extends BMetadataEntity  {

    private Long id;
    private String entityID;
    private String authenticationId;
    private Boolean dirty;
    private Integer type;
    private String Key;
    private String Value;
    private Long OwnerID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BMetadataDao myDao;

    private BUser Owner;
    private Long Owner__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public BMetadata() {
    }

    public BMetadata(Long id) {
        this.id = id;
    }

    public BMetadata(Long id, String entityID, String authenticationId, Boolean dirty, Integer type, String Key, String Value, Long OwnerID) {
        this.id = id;
        this.entityID = entityID;
        this.authenticationId = authenticationId;
        this.dirty = dirty;
        this.type = type;
        this.Key = Key;
        this.Value = Value;
        this.OwnerID = OwnerID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBMetadataDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getEntityID() {
        return entityID;
    }

    public void setEntityID(String entityID) {
        this.entityID = entityID;
    }

    public String getAuthenticationId() {
        return authenticationId;
    }

    public void setAuthenticationId(String authenticationId) {
        this.authenticationId = authenticationId;
    }

    public Boolean getDirty() {
        return dirty;
    }

    public void setDirty(Boolean dirty) {
        this.dirty = dirty;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public String getKey() {
        return Key;
    }

    public void setKey(String Key) {
        this.Key = Key;
    }

    public String getValue() {
        return Value;
    }

    public void setValue(String Value) {
        this.Value = Value;
    }

    public Long getOwnerID() {
        return OwnerID;
    }

    public void setOwnerID(Long OwnerID) {
        this.OwnerID = OwnerID;
    }

    /** To-one relationship, resolved on first access. */
    public BUser getOwner() {
        Long __key = this.OwnerID;
        if (Owner__resolvedKey == null || !Owner__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BUserDao targetDao = daoSession.getBUserDao();
            BUser OwnerNew = targetDao.load(__key);
            synchronized (this) {
                Owner = OwnerNew;
            	Owner__resolvedKey = __key;
            }
        }
        return Owner;
    }

    public void setOwner(BUser Owner) {
        synchronized (this) {
            this.Owner = Owner;
            OwnerID = Owner == null ? null : Owner.getId();
            Owner__resolvedKey = OwnerID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public void updateFrom(BMetadata bMetadata) {

    }

    @Override
    public BPath getPath() {
        if (getOwner() != null)
            return getOwner().getPath().addPathComponent(BFirebaseDefines.Path.BMetaPath, entityID);
        else return null;
    }

    @Override
    public com.braunster.chatsdk.dao.entity_interface.Entity.Type getEntityType() {
        return null;
    }

    @Override
    public void updateFromMap(Map<String, Object> map) {
        if (map.containsKey(BDefines.Keys.Bkey) && !map.get(BDefines.Keys.Bkey).equals(""))
            this.Key = (String) map.get(BDefines.Keys.Bkey);

        if (map.containsKey(BDefines.Keys.BType))
        {
            this.type = ((Long) map.get(BDefines.Keys.BType)).intValue();
        }

        if (map.containsKey(BDefines.Keys.BValue) && !map.get(BDefines.Keys.BValue).equals(""))
            this.Value = (String) map.get(BDefines.Keys.BValue);
    }

    @Override
    public Map<String, Object> asMap() {
        Map<String , Object> map = new HashMap<String, Object>();

        map.put(BDefines.Keys.Bkey, Key);
        map.put(BDefines.Keys.BValue, Value);
        map.put(BDefines.Keys.BType, type);

        return map;
    }

    @Override
    public Object getPriority() {
        return null;
    }

    @Override
    public Date lastUpdated() {
        return null;
    }
    // KEEP METHODS END

}
