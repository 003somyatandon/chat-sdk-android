package com.braunster.chatsdk.dao;

import com.braunster.chatsdk.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.braunster.chatsdk.dao.entities.BFollowerEntity;
import com.braunster.chatsdk.network.BFirebaseDefines;
import com.braunster.chatsdk.network.BPath;
// KEEP INCLUDES END
/**
 * Entity mapped to table BFOLLOWER.
 */
public class BFollower extends BFollowerEntity  {

    private Long id;
    private String entityID;
    private Integer type;
    private Long OwnerId;
    private Long UserId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BFollowerDao myDao;

    private BUser Owner;
    private Long Owner__resolvedKey;

    private BUser user;
    private Long user__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public BFollower() {
    }

    public BFollower(Long id) {
        this.id = id;
    }

    public BFollower(Long id, String entityID, Integer type, Long OwnerId, Long UserId) {
        this.id = id;
        this.entityID = entityID;
        this.type = type;
        this.OwnerId = OwnerId;
        this.UserId = UserId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBFollowerDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getEntityID() {
        return entityID;
    }

    public void setEntityID(String entityID) {
        this.entityID = entityID;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Long getOwnerId() {
        return OwnerId;
    }

    public void setOwnerId(Long OwnerId) {
        this.OwnerId = OwnerId;
    }

    public Long getUserId() {
        return UserId;
    }

    public void setUserId(Long UserId) {
        this.UserId = UserId;
    }

    /** To-one relationship, resolved on first access. */
    public BUser getOwner() {
        Long __key = this.OwnerId;
        if (Owner__resolvedKey == null || !Owner__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BUserDao targetDao = daoSession.getBUserDao();
            BUser OwnerNew = targetDao.load(__key);
            synchronized (this) {
                Owner = OwnerNew;
            	Owner__resolvedKey = __key;
            }
        }
        return Owner;
    }

    public void setOwner(BUser Owner) {
        synchronized (this) {
            this.Owner = Owner;
            OwnerId = Owner == null ? null : Owner.getId();
            Owner__resolvedKey = OwnerId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public BUser getUser() {
        Long __key = this.UserId;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BUserDao targetDao = daoSession.getBUserDao();
            BUser userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(BUser user) {
        synchronized (this) {
            this.user = user;
            UserId = user == null ? null : user.getId();
            user__resolvedKey = UserId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public BPath getBPath() {
        return new BPath().addPathComponent(BFirebaseDefines.Path.BUsers, type == Type.FOLLOWER ? getUser().getEntityID() : getOwner().getEntityID())
                .addPathComponent(type == Type.FOLLOWER ? BFirebaseDefines.Path.BFollowers : BFirebaseDefines.Path.BFollows, type == Type.FOLLOWER ? getOwner().getEntityID() : getUser().getEntityID());
    }
    // KEEP METHODS END

}
