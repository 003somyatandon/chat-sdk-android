package com.braunster.chatsdk.dao;

import com.braunster.chatsdk.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here

import android.support.annotation.IntDef;

import com.braunster.chatsdk.dao.entities.Entity;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

import de.greenrobot.dao.DaoException;
// KEEP INCLUDES END
/**
 * Entity mapped to table BUSER_CONNECTION.
 */
public class BUserConnection extends Entity  {

    private Long id;
    private String entityID;
    private Integer type;
    private Long OwnerId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BUserConnectionDao myDao;

    private BUser Owner;
    private Long Owner__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    public class Type{
        public static final int Friend = 0;
        public static final int Follower = 1;
        public static final int Blocked = 2;
    }

    @IntDef({Type.Friend, Type.Follower, Type.Blocked})
    @Retention(RetentionPolicy.SOURCE)
    public @interface ConnectionType{}
    // KEEP FIELDS END

    public BUserConnection() {
    }

    public BUserConnection(Long id) {
        this.id = id;
    }

    public BUserConnection(Long id, String entityID, Integer type, Long OwnerId) {
        this.id = id;
        this.entityID = entityID;
        this.type = type;
        this.OwnerId = OwnerId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBUserConnectionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getEntityID() {
        return entityID;
    }

    public void setEntityID(String entityID) {
        this.entityID = entityID;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Long getOwnerId() {
        return OwnerId;
    }

    public void setOwnerId(Long OwnerId) {
        this.OwnerId = OwnerId;
    }

    /** To-one relationship, resolved on first access. */
    public BUser getOwner() {
        Long __key = this.OwnerId;
        if (Owner__resolvedKey == null || !Owner__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BUserDao targetDao = daoSession.getBUserDao();
            BUser OwnerNew = targetDao.load(__key);
            synchronized (this) {
                Owner = OwnerNew;
            	Owner__resolvedKey = __key;
            }
        }
        return Owner;
    }

    public void setOwner(BUser Owner) {
        synchronized (this) {
            this.Owner = Owner;
            OwnerId = Owner == null ? null : Owner.getId();
            Owner__resolvedKey = OwnerId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
