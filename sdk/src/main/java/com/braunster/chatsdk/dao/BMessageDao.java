package com.braunster.chatsdk.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.braunster.chatsdk.dao.BMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BMESSAGE.
*/
public class BMessageDao extends AbstractDao<BMessage, String> {

    public static final String TABLENAME = "BMESSAGE";

    /**
     * Properties of entity BMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Date = new Property(0, java.util.Date.class, "date", false, "DATE");
        public final static Property EntityID = new Property(1, String.class, "entityID", true, "ENTITY_ID");
        public final static Property Dirty = new Property(2, Boolean.class, "dirty", false, "DIRTY");
        public final static Property Resources = new Property(3, String.class, "resources", false, "RESOURCES");
        public final static Property ResourcesPath = new Property(4, String.class, "resourcesPath", false, "RESOURCES_PATH");
        public final static Property Text = new Property(5, String.class, "text", false, "TEXT");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property Owner = new Property(7, String.class, "Owner", false, "OWNER");
    };

    private Query<BMessage> bThread_MessagesQuery;

    public BMessageDao(DaoConfig config) {
        super(config);
    }
    
    public BMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BMESSAGE' (" + //
                "'DATE' INTEGER," + // 0: date
                "'ENTITY_ID' TEXT PRIMARY KEY NOT NULL ," + // 1: entityID
                "'DIRTY' INTEGER," + // 2: dirty
                "'RESOURCES' TEXT," + // 3: resources
                "'RESOURCES_PATH' TEXT," + // 4: resourcesPath
                "'TEXT' TEXT," + // 5: text
                "'TYPE' TEXT," + // 6: type
                "'OWNER' TEXT);"); // 7: Owner
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BMESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BMessage entity) {
        stmt.clearBindings();
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(1, date.getTime());
        }
 
        String entityID = entity.getEntityID();
        if (entityID != null) {
            stmt.bindString(2, entityID);
        }
 
        Boolean dirty = entity.getDirty();
        if (dirty != null) {
            stmt.bindLong(3, dirty ? 1l: 0l);
        }
 
        String resources = entity.getResources();
        if (resources != null) {
            stmt.bindString(4, resources);
        }
 
        String resourcesPath = entity.getResourcesPath();
        if (resourcesPath != null) {
            stmt.bindString(5, resourcesPath);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(6, text);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public BMessage readEntity(Cursor cursor, int offset) {
        BMessage entity = new BMessage( //
            cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)), // date
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // entityID
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // dirty
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // resources
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // resourcesPath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // text
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BMessage entity, int offset) {
        entity.setDate(cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)));
        entity.setEntityID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDirty(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setResources(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setResourcesPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setText(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(BMessage entity, long rowId) {
        return entity.getEntityID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(BMessage entity) {
        if(entity != null) {
            return entity.getEntityID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "messages" to-many relationship of BThread. */
    public List<BMessage> _queryBThread_Messages(String Owner) {
        synchronized (this) {
            if (bThread_MessagesQuery == null) {
                QueryBuilder<BMessage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Owner.eq(null));
                bThread_MessagesQuery = queryBuilder.build();
            }
        }
        Query<BMessage> query = bThread_MessagesQuery.forCurrentThread();
        query.setParameter(0, Owner);
        return query.list();
    }

}
