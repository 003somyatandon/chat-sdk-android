package com.braunster.chatsdk.dao;

import com.braunster.chatsdk.firebase.BPath;

import java.util.Date;
import java.util.Map;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table BMESSAGE.
 */
public class BMessage extends Entity<BMessage>  {

    private java.util.Date date;
    private String entityID;
    private Boolean dirty;
    private String resources;
    private String resourcesPath;
    private String text;
    private Integer type;
    private String OwnerThread;
    private String Sender;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BMessageDao myDao;

    private BThread BThreadOwner;
    private String BThreadOwner__resolvedKey;

    private BUser BUserSender;
    private String BUserSender__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    public enum Type{
        bText, bImage, bLocation
    }
    // KEEP FIELDS END

    public BMessage() {
    }

    public BMessage(String entityID) {
        this.entityID = entityID;
    }

    public BMessage(java.util.Date date, String entityID, Boolean dirty, String resources, String resourcesPath, String text, Integer type, String OwnerThread, String Sender) {
        this.date = date;
        this.entityID = entityID;
        this.dirty = dirty;
        this.resources = resources;
        this.resourcesPath = resourcesPath;
        this.text = text;
        this.type = type;
        this.OwnerThread = OwnerThread;
        this.Sender = Sender;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBMessageDao() : null;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public String getEntityID() {
        return entityID;
    }

    public void setEntityID(String entityID) {
        this.entityID = entityID;
    }

    public Boolean getDirty() {
        return dirty;
    }

    public void setDirty(Boolean dirty) {
        this.dirty = dirty;
    }

    public String getResources() {
        return resources;
    }

    public void setResources(String resources) {
        this.resources = resources;
    }

    public String getResourcesPath() {
        return resourcesPath;
    }

    public void setResourcesPath(String resourcesPath) {
        this.resourcesPath = resourcesPath;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public String getOwnerThread() {
        return OwnerThread;
    }

    public void setOwnerThread(String OwnerThread) {
        this.OwnerThread = OwnerThread;
    }

    public String getSender() {
        return Sender;
    }

    public void setSender(String Sender) {
        this.Sender = Sender;
    }

    /** To-one relationship, resolved on first access. */
    public BThread getBThreadOwner() {
        String __key = this.OwnerThread;
        if (BThreadOwner__resolvedKey == null || BThreadOwner__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BThreadDao targetDao = daoSession.getBThreadDao();
            BThread BThreadOwnerNew = targetDao.load(__key);
            synchronized (this) {
                BThreadOwner = BThreadOwnerNew;
            	BThreadOwner__resolvedKey = __key;
            }
        }
        return BThreadOwner;
    }

    public void setBThreadOwner(BThread BThreadOwner) {
        synchronized (this) {
            this.BThreadOwner = BThreadOwner;
            OwnerThread = BThreadOwner == null ? null : BThreadOwner.getEntityID();
            BThreadOwner__resolvedKey = OwnerThread;
        }
    }

    /** To-one relationship, resolved on first access. */
    public BUser getBUserSender() {
        String __key = this.Sender;
        if (BUserSender__resolvedKey == null || BUserSender__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BUserDao targetDao = daoSession.getBUserDao();
            BUser BUserSenderNew = targetDao.load(__key);
            synchronized (this) {
                BUserSender = BUserSenderNew;
            	BUserSender__resolvedKey = __key;
            }
        }
        return BUserSender;
    }

    public void setBUserSender(BUser BUserSender) {
        synchronized (this) {
            this.BUserSender = BUserSender;
            Sender = BUserSender == null ? null : BUserSender.getEntityID();
            BUserSender__resolvedKey = Sender;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public void updateFrom(BMessage bMessage) {

    }

    @Override
    public BPath getPath() {
        return null;
    }

    @Override
    public Entity.Type getEntityType() {
        return null;
    }

    @Override
    public void updateFromMap(Map<String, Object> map) {

    }

    @Override
    public Map<String, Object> asMap() {
        return null;
    }

    @Override
    public Object getPriority() {
        return null;
    }

    @Override
    public Date lastUpdated() {
        return null;
    }

    @Override
    public void setEntityId(String entityID) {
        this.entityID = entityID;
    }
    // KEEP METHODS END

}
