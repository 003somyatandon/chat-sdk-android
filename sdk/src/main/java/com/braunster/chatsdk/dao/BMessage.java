package com.braunster.chatsdk.dao;

import com.braunster.chatsdk.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.braunster.chatsdk.Utils.Debug;
import com.braunster.chatsdk.dao.entities.BMessageEntity;
import com.braunster.chatsdk.dao.entities.Entity;
import com.braunster.chatsdk.network.BFirebaseDefines;
import com.braunster.chatsdk.network.BNetworkManager;
import com.braunster.chatsdk.network.BPath;

import java.util.Calendar;

import timber.log.Timber;
// KEEP INCLUDES END
/**
 * Entity mapped to table BMESSAGE.
 */
public class BMessage extends BMessageEntity  {

    private Long id;
    private String entityID;
    private java.util.Date date;
    private Boolean isRead;
    private String resourcesPath;
    private String text;
    private String imageDimensions;
    private Integer type;
    private Integer delivered;
    private Long threadId;
    private Long senderId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BMessageDao myDao;

    private BThread thread;
    private Long thread__resolvedKey;

    private BUser sender;
    private Long sender__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    public static final String TAG = BMessage.class.getSimpleName();
    public static final boolean DEBUG = Debug.BMessage;
    public String color = null;
    public String fontName = null;
    public String textColor = null;
    public int fontSize = -1;
    // KEEP FIELDS END

    public BMessage() {
    }

    public BMessage(Long id) {
        this.id = id;
    }

    public BMessage(Long id, String entityID, java.util.Date date, Boolean isRead, String resourcesPath, String text, String imageDimensions, Integer type, Integer delivered, Long threadId, Long senderId) {
        this.id = id;
        this.entityID = entityID;
        this.date = date;
        this.isRead = isRead;
        this.resourcesPath = resourcesPath;
        this.text = text;
        this.imageDimensions = imageDimensions;
        this.type = type;
        this.delivered = delivered;
        this.threadId = threadId;
        this.senderId = senderId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBMessageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getEntityID() {
        return entityID;
    }

    public void setEntityID(String entityID) {
        this.entityID = entityID;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Boolean getIsRead() {
        return isRead;
    }

    public void setIsRead(Boolean isRead) {
        this.isRead = isRead;
    }

    public String getResourcesPath() {
        return resourcesPath;
    }

    public void setResourcesPath(String resourcesPath) {
        this.resourcesPath = resourcesPath;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public String getImageDimensions() {
        return imageDimensions;
    }

    public void setImageDimensions(String imageDimensions) {
        this.imageDimensions = imageDimensions;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Integer getDelivered() {
        return delivered;
    }

    public void setDelivered(Integer delivered) {
        this.delivered = delivered;
    }

    public Long getThreadId() {
        return threadId;
    }

    public void setThreadId(Long threadId) {
        this.threadId = threadId;
    }

    public Long getSenderId() {
        return senderId;
    }

    public void setSenderId(Long senderId) {
        this.senderId = senderId;
    }

    /** To-one relationship, resolved on first access. */
    public BThread getThread() {
        Long __key = this.threadId;
        if (thread__resolvedKey == null || !thread__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BThreadDao targetDao = daoSession.getBThreadDao();
            BThread threadNew = targetDao.load(__key);
            synchronized (this) {
                thread = threadNew;
            	thread__resolvedKey = __key;
            }
        }
        return thread;
    }

    public void setThread(BThread thread) {
        synchronized (this) {
            this.thread = thread;
            threadId = thread == null ? null : thread.getId();
            thread__resolvedKey = threadId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public BUser getSender() {
        Long __key = this.senderId;
        if (sender__resolvedKey == null || !sender__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BUserDao targetDao = daoSession.getBUserDao();
            BUser senderNew = targetDao.load(__key);
            synchronized (this) {
                sender = senderNew;
            	sender__resolvedKey = __key;
            }
        }
        return sender;
    }

    public void setSender(BUser sender) {
        synchronized (this) {
            this.sender = sender;
            senderId = sender == null ? null : sender.getId();
            sender__resolvedKey = senderId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public BPath getBPath() {
        if (getThread() == null)
        {
            if (DEBUG) Timber.e("Owner Thread is null");
            return null;
        }
        return getThread().getBPath().addPathComponent(BFirebaseDefines.Path.BMessages, entityID);
    }

    @Override
    public Entity.Type getEntityType() {
        return Entity.Type.bEntityTypeMessages;
    }

    public boolean isSameDayAsMessage(BMessage message){
        // Current time.
        Calendar nowCalendar = Calendar.getInstance();
        nowCalendar.setTime(date);
        // Message time.
        Calendar messageCalendar = Calendar.getInstance();
        messageCalendar.setTime(message.getDate());
        // Compare
        return isSameDay(nowCalendar, messageCalendar);
    }

    private boolean isSameDay(Calendar cal1, Calendar cal2) {
        if (cal1 == null || cal2 == null)
            return false;

        return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA)
                && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR)
                && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));
    }

    public boolean isMine(){
        return getSender().equals(BNetworkManager.sharedManager().getNetworkAdapter().currentUserModel());
    }

    @Override
    public String color() {
        return getSender().getMessageColor();
    }
    
    public int wasDelivered(){
       return delivered == null ?  Delivered.Yes :  delivered;
        
    }

    /** Null safe version of getIsRead*/
    public boolean wasRead(){
        return isRead==null || isRead;
    }

    @Override
    public String toString() {
        return String.format("BMessage, id: %s, type: %s, Sender: %s", id, type, getSender());
    }
    // KEEP METHODS END

}
