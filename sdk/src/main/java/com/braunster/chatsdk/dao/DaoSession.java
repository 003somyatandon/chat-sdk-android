package com.braunster.chatsdk.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.braunster.chatsdk.dao.BUser;
import com.braunster.chatsdk.dao.BUserAccount;
import com.braunster.chatsdk.dao.BUserConnection;
import com.braunster.chatsdk.dao.BMessage;
import com.braunster.chatsdk.dao.BThread;
import com.braunster.chatsdk.dao.BLinkData;
import com.braunster.chatsdk.dao.BInstallation;
import com.braunster.chatsdk.dao.BFollower;

import com.braunster.chatsdk.dao.BUserDao;
import com.braunster.chatsdk.dao.BUserAccountDao;
import com.braunster.chatsdk.dao.BUserConnectionDao;
import com.braunster.chatsdk.dao.BMessageDao;
import com.braunster.chatsdk.dao.BThreadDao;
import com.braunster.chatsdk.dao.BLinkDataDao;
import com.braunster.chatsdk.dao.BInstallationDao;
import com.braunster.chatsdk.dao.BFollowerDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig bUserDaoConfig;
    private final DaoConfig bUserAccountDaoConfig;
    private final DaoConfig bUserConnectionDaoConfig;
    private final DaoConfig bMessageDaoConfig;
    private final DaoConfig bThreadDaoConfig;
    private final DaoConfig bLinkDataDaoConfig;
    private final DaoConfig bInstallationDaoConfig;
    private final DaoConfig bFollowerDaoConfig;

    private final BUserDao bUserDao;
    private final BUserAccountDao bUserAccountDao;
    private final BUserConnectionDao bUserConnectionDao;
    private final BMessageDao bMessageDao;
    private final BThreadDao bThreadDao;
    private final BLinkDataDao bLinkDataDao;
    private final BInstallationDao bInstallationDao;
    private final BFollowerDao bFollowerDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        bUserDaoConfig = daoConfigMap.get(BUserDao.class).clone();
        bUserDaoConfig.initIdentityScope(type);

        bUserAccountDaoConfig = daoConfigMap.get(BUserAccountDao.class).clone();
        bUserAccountDaoConfig.initIdentityScope(type);

        bUserConnectionDaoConfig = daoConfigMap.get(BUserConnectionDao.class).clone();
        bUserConnectionDaoConfig.initIdentityScope(type);

        bMessageDaoConfig = daoConfigMap.get(BMessageDao.class).clone();
        bMessageDaoConfig.initIdentityScope(type);

        bThreadDaoConfig = daoConfigMap.get(BThreadDao.class).clone();
        bThreadDaoConfig.initIdentityScope(type);

        bLinkDataDaoConfig = daoConfigMap.get(BLinkDataDao.class).clone();
        bLinkDataDaoConfig.initIdentityScope(type);

        bInstallationDaoConfig = daoConfigMap.get(BInstallationDao.class).clone();
        bInstallationDaoConfig.initIdentityScope(type);

        bFollowerDaoConfig = daoConfigMap.get(BFollowerDao.class).clone();
        bFollowerDaoConfig.initIdentityScope(type);

        bUserDao = new BUserDao(bUserDaoConfig, this);
        bUserAccountDao = new BUserAccountDao(bUserAccountDaoConfig, this);
        bUserConnectionDao = new BUserConnectionDao(bUserConnectionDaoConfig, this);
        bMessageDao = new BMessageDao(bMessageDaoConfig, this);
        bThreadDao = new BThreadDao(bThreadDaoConfig, this);
        bLinkDataDao = new BLinkDataDao(bLinkDataDaoConfig, this);
        bInstallationDao = new BInstallationDao(bInstallationDaoConfig, this);
        bFollowerDao = new BFollowerDao(bFollowerDaoConfig, this);

        registerDao(BUser.class, bUserDao);
        registerDao(BUserAccount.class, bUserAccountDao);
        registerDao(BUserConnection.class, bUserConnectionDao);
        registerDao(BMessage.class, bMessageDao);
        registerDao(BThread.class, bThreadDao);
        registerDao(BLinkData.class, bLinkDataDao);
        registerDao(BInstallation.class, bInstallationDao);
        registerDao(BFollower.class, bFollowerDao);
    }
    
    public void clear() {
        bUserDaoConfig.getIdentityScope().clear();
        bUserAccountDaoConfig.getIdentityScope().clear();
        bUserConnectionDaoConfig.getIdentityScope().clear();
        bMessageDaoConfig.getIdentityScope().clear();
        bThreadDaoConfig.getIdentityScope().clear();
        bLinkDataDaoConfig.getIdentityScope().clear();
        bInstallationDaoConfig.getIdentityScope().clear();
        bFollowerDaoConfig.getIdentityScope().clear();
    }

    public BUserDao getBUserDao() {
        return bUserDao;
    }

    public BUserAccountDao getBUserAccountDao() {
        return bUserAccountDao;
    }

    public BUserConnectionDao getBUserConnectionDao() {
        return bUserConnectionDao;
    }

    public BMessageDao getBMessageDao() {
        return bMessageDao;
    }

    public BThreadDao getBThreadDao() {
        return bThreadDao;
    }

    public BLinkDataDao getBLinkDataDao() {
        return bLinkDataDao;
    }

    public BInstallationDao getBInstallationDao() {
        return bInstallationDao;
    }

    public BFollowerDao getBFollowerDao() {
        return bFollowerDao;
    }

}
