package com.braunster.chatsdk.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig bUserDaoConfig;
    private final DaoConfig bLinkedAccountDaoConfig;
    private final DaoConfig bLinkedContactDaoConfig;
    private final DaoConfig bMetadataDaoConfig;
    private final DaoConfig bMessageDaoConfig;
    private final DaoConfig bThreadDaoConfig;
    private final DaoConfig bLinkDataDaoConfig;

    private final BUserDao bUserDao;
    private final BLinkedAccountDao bLinkedAccountDao;
    private final BLinkedContactDao bLinkedContactDao;
    private final BMetadataDao bMetadataDao;
    private final BMessageDao bMessageDao;
    private final BThreadDao bThreadDao;
    private final BLinkDataDao bLinkDataDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        bUserDaoConfig = daoConfigMap.get(BUserDao.class).clone();
        bUserDaoConfig.initIdentityScope(type);

        bLinkedAccountDaoConfig = daoConfigMap.get(BLinkedAccountDao.class).clone();
        bLinkedAccountDaoConfig.initIdentityScope(type);

        bLinkedContactDaoConfig = daoConfigMap.get(BLinkedContactDao.class).clone();
        bLinkedContactDaoConfig.initIdentityScope(type);

        bMetadataDaoConfig = daoConfigMap.get(BMetadataDao.class).clone();
        bMetadataDaoConfig.initIdentityScope(type);

        bMessageDaoConfig = daoConfigMap.get(BMessageDao.class).clone();
        bMessageDaoConfig.initIdentityScope(type);

        bThreadDaoConfig = daoConfigMap.get(BThreadDao.class).clone();
        bThreadDaoConfig.initIdentityScope(type);

        bLinkDataDaoConfig = daoConfigMap.get(BLinkDataDao.class).clone();
        bLinkDataDaoConfig.initIdentityScope(type);

        bUserDao = new BUserDao(bUserDaoConfig, this);
        bLinkedAccountDao = new BLinkedAccountDao(bLinkedAccountDaoConfig, this);
        bLinkedContactDao = new BLinkedContactDao(bLinkedContactDaoConfig, this);
        bMetadataDao = new BMetadataDao(bMetadataDaoConfig, this);
        bMessageDao = new BMessageDao(bMessageDaoConfig, this);
        bThreadDao = new BThreadDao(bThreadDaoConfig, this);
        bLinkDataDao = new BLinkDataDao(bLinkDataDaoConfig, this);

        registerDao(BUser.class, bUserDao);
        registerDao(BLinkedAccount.class, bLinkedAccountDao);
        registerDao(BLinkedContact.class, bLinkedContactDao);
        registerDao(BMetadata.class, bMetadataDao);
        registerDao(BMessage.class, bMessageDao);
        registerDao(BThread.class, bThreadDao);
        registerDao(BLinkData.class, bLinkDataDao);
    }
    
    public void clear() {
        bUserDaoConfig.getIdentityScope().clear();
        bLinkedAccountDaoConfig.getIdentityScope().clear();
        bLinkedContactDaoConfig.getIdentityScope().clear();
        bMetadataDaoConfig.getIdentityScope().clear();
        bMessageDaoConfig.getIdentityScope().clear();
        bThreadDaoConfig.getIdentityScope().clear();
        bLinkDataDaoConfig.getIdentityScope().clear();
    }

    public BUserDao getBUserDao() {
        return bUserDao;
    }

    public BLinkedAccountDao getBLinkedAccountDao() {
        return bLinkedAccountDao;
    }

    public BLinkedContactDao getBLinkedContactDao() {
        return bLinkedContactDao;
    }

    public BMetadataDao getBMetadataDao() {
        return bMetadataDao;
    }

    public BMessageDao getBMessageDao() {
        return bMessageDao;
    }

    public BThreadDao getBThreadDao() {
        return bThreadDao;
    }

    public BLinkDataDao getBLinkDataDao() {
        return bLinkDataDao;
    }

}
