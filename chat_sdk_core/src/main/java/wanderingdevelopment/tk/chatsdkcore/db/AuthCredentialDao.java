package wanderingdevelopment.tk.chatsdkcore.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import wanderingdevelopment.tk.chatsdkcore.entities.User;

import wanderingdevelopment.tk.chatsdkcore.entities.AuthCredential;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AUTH_CREDENTIAL".
*/
public class AuthCredentialDao extends AbstractDao<AuthCredential, Void> {

    public static final String TABLENAME = "AUTH_CREDENTIAL";

    /**
     * Properties of entity AuthCredential.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserAlias = new Property(0, String.class, "userAlias", false, "USER_ALIAS");
        public final static Property UserPassword = new Property(1, String.class, "userPassword", false, "USER_PASSWORD");
        public final static Property CurrentUserId = new Property(2, long.class, "currentUserId", false, "CURRENT_USER_ID");
    }

    private DaoSession daoSession;


    public AuthCredentialDao(DaoConfig config) {
        super(config);
    }
    
    public AuthCredentialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUTH_CREDENTIAL\" (" + //
                "\"USER_ALIAS\" TEXT," + // 0: userAlias
                "\"USER_PASSWORD\" TEXT," + // 1: userPassword
                "\"CURRENT_USER_ID\" INTEGER NOT NULL );"); // 2: currentUserId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUTH_CREDENTIAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AuthCredential entity) {
        stmt.clearBindings();
 
        String userAlias = entity.getUserAlias();
        if (userAlias != null) {
            stmt.bindString(1, userAlias);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(2, userPassword);
        }
        stmt.bindLong(3, entity.getCurrentUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AuthCredential entity) {
        stmt.clearBindings();
 
        String userAlias = entity.getUserAlias();
        if (userAlias != null) {
            stmt.bindString(1, userAlias);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(2, userPassword);
        }
        stmt.bindLong(3, entity.getCurrentUserId());
    }

    @Override
    protected final void attachEntity(AuthCredential entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AuthCredential readEntity(Cursor cursor, int offset) {
        AuthCredential entity = new AuthCredential( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userAlias
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userPassword
            cursor.getLong(offset + 2) // currentUserId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AuthCredential entity, int offset) {
        entity.setUserAlias(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserPassword(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCurrentUserId(cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AuthCredential entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AuthCredential entity) {
        return null;
    }

    @Override
    public boolean hasKey(AuthCredential entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM AUTH_CREDENTIAL T");
            builder.append(" LEFT JOIN USER T0 ON T.\"CURRENT_USER_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected AuthCredential loadCurrentDeep(Cursor cursor, boolean lock) {
        AuthCredential entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User currentUser = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(currentUser != null) {
            entity.setCurrentUser(currentUser);
        }

        return entity;    
    }

    public AuthCredential loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<AuthCredential> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<AuthCredential> list = new ArrayList<AuthCredential>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<AuthCredential> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<AuthCredential> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
