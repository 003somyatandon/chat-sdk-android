package wanderingdevelopment.tk.chatsdkcore.db;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import wanderingdevelopment.tk.chatsdkcore.entities.AuthCredential;
import wanderingdevelopment.tk.chatsdkcore.entities.JoinMessageWithUser;
import wanderingdevelopment.tk.chatsdkcore.entities.JoinThreadWithUser;
import wanderingdevelopment.tk.chatsdkcore.entities.Message;
import wanderingdevelopment.tk.chatsdkcore.entities.Thread;
import wanderingdevelopment.tk.chatsdkcore.entities.User;

import wanderingdevelopment.tk.chatsdkcore.db.AuthCredentialDao;
import wanderingdevelopment.tk.chatsdkcore.db.JoinMessageWithUserDao;
import wanderingdevelopment.tk.chatsdkcore.db.JoinThreadWithUserDao;
import wanderingdevelopment.tk.chatsdkcore.db.MessageDao;
import wanderingdevelopment.tk.chatsdkcore.db.ThreadDao;
import wanderingdevelopment.tk.chatsdkcore.db.UserDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig authCredentialDaoConfig;
    private final DaoConfig joinMessageWithUserDaoConfig;
    private final DaoConfig joinThreadWithUserDaoConfig;
    private final DaoConfig messageDaoConfig;
    private final DaoConfig threadDaoConfig;
    private final DaoConfig userDaoConfig;

    private final AuthCredentialDao authCredentialDao;
    private final JoinMessageWithUserDao joinMessageWithUserDao;
    private final JoinThreadWithUserDao joinThreadWithUserDao;
    private final MessageDao messageDao;
    private final ThreadDao threadDao;
    private final UserDao userDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        authCredentialDaoConfig = daoConfigMap.get(AuthCredentialDao.class).clone();
        authCredentialDaoConfig.initIdentityScope(type);

        joinMessageWithUserDaoConfig = daoConfigMap.get(JoinMessageWithUserDao.class).clone();
        joinMessageWithUserDaoConfig.initIdentityScope(type);

        joinThreadWithUserDaoConfig = daoConfigMap.get(JoinThreadWithUserDao.class).clone();
        joinThreadWithUserDaoConfig.initIdentityScope(type);

        messageDaoConfig = daoConfigMap.get(MessageDao.class).clone();
        messageDaoConfig.initIdentityScope(type);

        threadDaoConfig = daoConfigMap.get(ThreadDao.class).clone();
        threadDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        authCredentialDao = new AuthCredentialDao(authCredentialDaoConfig, this);
        joinMessageWithUserDao = new JoinMessageWithUserDao(joinMessageWithUserDaoConfig, this);
        joinThreadWithUserDao = new JoinThreadWithUserDao(joinThreadWithUserDaoConfig, this);
        messageDao = new MessageDao(messageDaoConfig, this);
        threadDao = new ThreadDao(threadDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);

        registerDao(AuthCredential.class, authCredentialDao);
        registerDao(JoinMessageWithUser.class, joinMessageWithUserDao);
        registerDao(JoinThreadWithUser.class, joinThreadWithUserDao);
        registerDao(Message.class, messageDao);
        registerDao(Thread.class, threadDao);
        registerDao(User.class, userDao);
    }
    
    public void clear() {
        authCredentialDaoConfig.clearIdentityScope();
        joinMessageWithUserDaoConfig.clearIdentityScope();
        joinThreadWithUserDaoConfig.clearIdentityScope();
        messageDaoConfig.clearIdentityScope();
        threadDaoConfig.clearIdentityScope();
        userDaoConfig.clearIdentityScope();
    }

    public AuthCredentialDao getAuthCredentialDao() {
        return authCredentialDao;
    }

    public JoinMessageWithUserDao getJoinMessageWithUserDao() {
        return joinMessageWithUserDao;
    }

    public JoinThreadWithUserDao getJoinThreadWithUserDao() {
        return joinThreadWithUserDao;
    }

    public MessageDao getMessageDao() {
        return messageDao;
    }

    public ThreadDao getThreadDao() {
        return threadDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

}
