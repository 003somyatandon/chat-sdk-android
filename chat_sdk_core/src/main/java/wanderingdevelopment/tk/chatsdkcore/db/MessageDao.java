package wanderingdevelopment.tk.chatsdkcore.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import org.joda.time.DateTime;
import wanderingdevelopment.tk.chatsdkcore.entities.Message.DateTimeConverter;
import wanderingdevelopment.tk.chatsdkcore.entities.Message.Type;
import wanderingdevelopment.tk.chatsdkcore.entities.Message.TypeConverter;

import wanderingdevelopment.tk.chatsdkcore.entities.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ThreadId = new Property(1, Long.class, "threadId", false, "THREAD_ID");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property DateTime = new Property(3, Long.class, "dateTime", false, "DATE_TIME");
        public final static Property Text = new Property(4, String.class, "text", false, "TEXT");
        public final static Property Payload = new Property(5, String.class, "payload", false, "PAYLOAD");
    }

    private final TypeConverter typeConverter = new TypeConverter();
    private final DateTimeConverter dateTimeConverter = new DateTimeConverter();
    private Query<Message> thread_MessagesQuery;

    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"THREAD_ID\" INTEGER," + // 1: threadId
                "\"TYPE\" INTEGER," + // 2: type
                "\"DATE_TIME\" INTEGER," + // 3: dateTime
                "\"TEXT\" TEXT," + // 4: text
                "\"PAYLOAD\" TEXT);"); // 5: payload
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long threadId = entity.getThreadId();
        if (threadId != null) {
            stmt.bindLong(2, threadId);
        }
 
        Type type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, typeConverter.convertToDatabaseValue(type));
        }
 
        DateTime dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindLong(4, dateTimeConverter.convertToDatabaseValue(dateTime));
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(5, text);
        }
 
        String payload = entity.getPayload();
        if (payload != null) {
            stmt.bindString(6, payload);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long threadId = entity.getThreadId();
        if (threadId != null) {
            stmt.bindLong(2, threadId);
        }
 
        Type type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, typeConverter.convertToDatabaseValue(type));
        }
 
        DateTime dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindLong(4, dateTimeConverter.convertToDatabaseValue(dateTime));
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(5, text);
        }
 
        String payload = entity.getPayload();
        if (payload != null) {
            stmt.bindString(6, payload);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // threadId
            cursor.isNull(offset + 2) ? null : typeConverter.convertToEntityProperty(cursor.getInt(offset + 2)), // type
            cursor.isNull(offset + 3) ? null : dateTimeConverter.convertToEntityProperty(cursor.getLong(offset + 3)), // dateTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // text
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // payload
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setThreadId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : typeConverter.convertToEntityProperty(cursor.getInt(offset + 2)));
        entity.setDateTime(cursor.isNull(offset + 3) ? null : dateTimeConverter.convertToEntityProperty(cursor.getLong(offset + 3)));
        entity.setText(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPayload(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Message entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "messages" to-many relationship of Thread. */
    public List<Message> _queryThread_Messages(Long threadId) {
        synchronized (this) {
            if (thread_MessagesQuery == null) {
                QueryBuilder<Message> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ThreadId.eq(null));
                queryBuilder.orderRaw("T.'DATE_TIME' ASC");
                thread_MessagesQuery = queryBuilder.build();
            }
        }
        Query<Message> query = thread_MessagesQuery.forCurrentThread();
        query.setParameter(0, threadId);
        return query.list();
    }

}
